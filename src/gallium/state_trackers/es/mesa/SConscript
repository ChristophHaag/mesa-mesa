#
# File: src\gallium\state_trackers\es\mesa\SConscript
#
# This SConscript file copies Mesa from the Gallium tree and builds a Mesa GLES library.
#

import os
import shutil


Import('*')


env = env.Clone()

env.Append(CPPPATH = [
	'.',
])

if gcc:
	env.Append(CFLAGS = [
		'-std=c99',
	])

mesa_sources = [
	'glapi/dispatch.h',
	'glapi/glapi.h',
	'glapi/glapioffsets.h',
	'glapi/glapitable.h',
	'glapi/glapitemp.h',
	'glapi/glprocs.h',
	'glapi/glthread.c',
	'glapi/glthread.h',
	'main/api_arrayelt.c',
	'main/api_arrayelt.h',
	'main/api_exec.h',
	'main/api_loopback.c',
	'main/api_loopback.h',
	'main/api_noop.c',
	'main/api_noop.h',
	'main/api_validate.c',
	'main/api_validate.h',
	'main/arrayobj.c',
	'main/arrayobj.h',
	'main/bitset.h',
	'main/blend.c',
	'main/blend.h',
	'main/bufferobj.c',
	'main/bufferobj.h',
	'main/buffers.c',
	'main/buffers.h',
	'main/clear.c',
	'main/clear.h',
	'main/clip.c',
	'main/clip.h',
	'main/colormac.h',
	'main/config.h',
	'main/context.c',
	'main/context.h',
	'main/dd.h',
	'main/debug.c',
	'main/debug.h',
	'main/depth.c',
	'main/depth.h',
	'main/depthstencil.c',
	'main/depthstencil.h',
	'main/enable.c',
	'main/enable.h',
	'main/enums.c',
	'main/enums.h',
	'main/execmem.c',
	'main/extensions.c',
	'main/extensions.h',
	'main/fbobject.c',
	'main/fbobject.h',
	'main/ffvertex_prog.c',
	'main/ffvertex_prog.h',
	'main/fog.c',
	'main/fog.h',
	'main/framebuffer.c',
	'main/framebuffer.h',
	'main/get.h',
	'main/get.c',
	'main/getstring.c',
	'main/glheader.h',
	'main/hash.c',
	'main/hash.h',
	'main/hint.c',
	'main/hint.h',
	'main/image.c',
	'main/image.h',
	'main/imports.c',
	'main/imports.h',
	'main/light.c',
	'main/light.h',
	'main/lines.c',
	'main/lines.h',
	'main/macros.h',
	'main/matrix.c',
	'main/matrix.h',
	'main/mipmap.c',
	'main/mipmap.h',
	'main/mm.h',
	'main/mtypes.h',
	'main/multisample.c',
	'main/multisample.h',
	'main/pixel.h',
	'main/pixelstore.c',
	'main/pixelstore.h',
	'main/points.c',
	'main/points.h',
	'main/polygon.c',
	'main/polygon.h',
	'main/rbadaptors.c',
	'main/rbadaptors.h',
	'main/readpix.c',
	'main/readpix.h',
	'main/renderbuffer.c',
	'main/renderbuffer.h',
	'main/scissor.c',
	'main/scissor.h',
	'main/shaders.c',
	'main/shaders.h',
	'main/simple_list.h',
	'main/state.c',
	'main/state.h',
	'main/stencil.c',
	'main/stencil.h',
	'main/texcompress.c',
	'main/texcompress.h',
	'main/texenv.c',
	'main/texenv.h',
	'main/texenvprogram.c',
	'main/texenvprogram.h',
	'main/texformat.c',
	'main/texformat.h',
	'main/texformat_tmp.h',
        'main/texgen.c',
        'main/texgen.h',
	'main/teximage.c',
	'main/teximage.h',
	'main/texobj.c',
	'main/texobj.h',
	'main/texparam.c',
	'main/texparam.h',
	'main/texrender.c',
	'main/texrender.h',
	'main/texstate.c',
	'main/texstate.h',
	'main/texstore.c',
	'main/texstore.h',
	'main/varray.c',
	'main/varray.h',
	'main/version.h',
	'main/vtxfmt.c',
	'main/vtxfmt.h',
	'main/vtxfmt_tmp.h',
	'math/mathmod.h',
	'math/m_clip_tmp.h',
	'math/m_copy_tmp.h',
	'math/m_debug_clip.c',
	'math/m_debug.h',
	'math/m_debug_norm.c',
	'math/m_debug_util.h',
	'math/m_debug_xform.c',
	'math/m_dotprod_tmp.h',
	'math/m_eval.c',
	'math/m_eval.h',
	'math/m_matrix.c',
	'math/m_matrix.h',
	'math/m_norm_tmp.h',
	'math/m_translate.c',
	'math/m_translate.h',
	'math/m_trans_tmp.h',
	'math/m_vector.c',
	'math/m_vector.h',
	'math/m_xform.c',
	'math/m_xform.h',
	'math/m_xform_tmp.h',
	'shader/arbprogparse.c',
	'shader/arbprogparse.h',
	'shader/arbprogram.c',
	'shader/arbprogram.h',
	'shader/arbprogram_syn.h',
	'shader/grammar/grammar_crt.h',
	'shader/grammar/grammar.h',
	'shader/grammar/grammar_mesa.c',
	'shader/grammar/grammar_mesa.h',
	'shader/grammar/grammar_syn.h',
	'shader/prog_cache.c',
	'shader/prog_cache.h',
	'shader/prog_execute.c',
	'shader/prog_execute.h',
	'shader/prog_instruction.c',
	'shader/prog_instruction.h',
	'shader/prog_parameter.c',
	'shader/prog_parameter.h',
	'shader/prog_print.c',
	'shader/prog_print.h',
	'shader/program.c',
	'shader/program.h',
	'shader/programopt.c',
	'shader/programopt.h',
	'shader/prog_statevars.c',
	'shader/prog_statevars.h',
	'shader/prog_uniform.c',
	'shader/prog_uniform.h',
	'shader/shader_api.c',
	'shader/shader_api.h',
	'shader/slang/library/slang_120_core_gc.h',
	'shader/slang/library/slang_builtin_120_common_gc.h',
	'shader/slang/library/slang_builtin_120_fragment_gc.h',
	'shader/slang/library/slang_common_builtin_gc.h',
	'shader/slang/library/slang_core_gc.h',
	'shader/slang/library/slang_fragment_builtin_gc.h',
	'shader/slang/library/slang_pp_directives_syn.h',
	'shader/slang/library/slang_pp_expression_syn.h',
	'shader/slang/library/slang_pp_version_syn.h',
	'shader/slang/library/slang_shader_syn.h',
	'shader/slang/library/slang_vertex_builtin_gc.h',
	'shader/slang/slang_builtin.c',
	'shader/slang/slang_builtin.h',
	'shader/slang/slang_codegen.c',
	'shader/slang/slang_codegen.h',
	'shader/slang/slang_compile.c',
	'shader/slang/slang_compile_function.c',
	'shader/slang/slang_compile_function.h',
	'shader/slang/slang_compile.h',
	'shader/slang/slang_compile_operation.c',
	'shader/slang/slang_compile_operation.h',
	'shader/slang/slang_compile_struct.c',
	'shader/slang/slang_compile_struct.h',
	'shader/slang/slang_compile_variable.c',
	'shader/slang/slang_compile_variable.h',
	'shader/slang/slang_emit.c',
	'shader/slang/slang_emit.h',
	'shader/slang/slang_ir.c',
	'shader/slang/slang_ir.h',
	'shader/slang/slang_label.c',
	'shader/slang/slang_label.h',
	'shader/slang/slang_library_noise.c',
	'shader/slang/slang_library_noise.h',
	'shader/slang/slang_link.c',
	'shader/slang/slang_link.h',
	'shader/slang/slang_log.c',
	'shader/slang/slang_log.h',
	'shader/slang/slang_mem.c',
	'shader/slang/slang_mem.h',
	'shader/slang/slang_preprocess.c',
	'shader/slang/slang_preprocess.h',
	'shader/slang/slang_print.c',
	'shader/slang/slang_print.h',
	'shader/slang/slang_simplify.c',
	'shader/slang/slang_simplify.h',
	'shader/slang/slang_storage.c',
	'shader/slang/slang_storage.h',
	'shader/slang/slang_typeinfo.c',
	'shader/slang/slang_typeinfo.h',
	'shader/slang/slang_utility.c',
	'shader/slang/slang_utility.h',
	'shader/slang/slang_vartable.c',
	'shader/slang/slang_vartable.h',
	'state_tracker/st_atom_blend.c',
	'state_tracker/st_atom.c',
	'state_tracker/st_atom_clip.c',
	'state_tracker/st_atom_constbuf.c',
	'state_tracker/st_atom_constbuf.h',
	'state_tracker/st_atom_depth.c',
	'state_tracker/st_atom_framebuffer.c',
	'state_tracker/st_atom.h',
	'state_tracker/st_atom_pixeltransfer.c',
	'state_tracker/st_atom_rasterizer.c',
	'state_tracker/st_atom_sampler.c',
	'state_tracker/st_atom_scissor.c',
	'state_tracker/st_atom_shader.c',
	'state_tracker/st_atom_shader.h',
	'state_tracker/st_atom_stipple.c',
	'state_tracker/st_atom_texture.c',
	'state_tracker/st_atom_viewport.c',
	'state_tracker/st_cache.h',
	'state_tracker/st_cb_accum.c',
	'state_tracker/st_cb_accum.h',
	'state_tracker/st_cb_bitmap.c',
	'state_tracker/st_cb_bitmap.h',
	'state_tracker/st_cb_blit.c',
	'state_tracker/st_cb_blit.h',
	'state_tracker/st_cb_bufferobjects.c',
	'state_tracker/st_cb_bufferobjects.h',
	'state_tracker/st_cb_clear.c',
	'state_tracker/st_cb_clear.h',
	'state_tracker/st_cb_fbo.c',
	'state_tracker/st_cb_fbo.h',
	'state_tracker/st_cb_get.c',
	'state_tracker/st_cb_get.h',
	'state_tracker/st_cb_flush.c',
	'state_tracker/st_cb_flush.h',
	'state_tracker/st_cb_program.c',
	'state_tracker/st_cb_program.h',
	'state_tracker/st_cb_queryobj.c',
	'state_tracker/st_cb_queryobj.h',
	'state_tracker/st_cb_readpixels.c',
	'state_tracker/st_cb_readpixels.h',
	'state_tracker/st_cb_strings.c',
	'state_tracker/st_cb_strings.h',
	'state_tracker/st_cb_texture.c',
	'state_tracker/st_cb_texture.h',
	'state_tracker/st_context.c',
	'state_tracker/st_context.h',
	'state_tracker/st_debug.c',
	'state_tracker/st_debug.h',
	'state_tracker/st_draw.c',
	'state_tracker/st_draw.h',
	'state_tracker/st_extensions.c',
	'state_tracker/st_extensions.h',
	'state_tracker/st_format.c',
	'state_tracker/st_format.h',
	'state_tracker/st_framebuffer.c',
	'state_tracker/st_gen_mipmap.c',
	'state_tracker/st_gen_mipmap.h',
	'state_tracker/st_mesa_to_tgsi.c',
	'state_tracker/st_mesa_to_tgsi.h',
	'state_tracker/st_program.c',
	'state_tracker/st_program.h',
	'state_tracker/st_public.h',
	'state_tracker/st_texture.c',
	'state_tracker/st_texture.h',
	'vbo/vbo_attrib.h',
	'vbo/vbo_attrib_tmp.h',
	'vbo/vbo_context.c',
	'vbo/vbo_context.h',
	'vbo/vbo_exec_api.c',
	'vbo/vbo_exec_array.c',
	'vbo/vbo_exec.c',
	'vbo/vbo_exec_draw.c',
	'vbo/vbo_exec_eval.c',
	'vbo/vbo_exec.h',
	'vbo/vbo.h',
	'vbo/vbo_rebase.c',
	'vbo/vbo_split.c',
	'vbo/vbo_split_copy.c',
	'vbo/vbo_split.h',
	'vbo/vbo_split_inplace.c',
]

mesa_extra_sources = [
	'shader/grammar/grammar.c',
]

local_sources = [
	'main/pixel.c',
	'state_tracker/st_cb_drawtex.c'
]


# Just copy all necessary source files from mesa without telling scons about it
# to keep things simple for now.
for source in mesa_sources + mesa_extra_sources:
	src = os.path.join(env['gallium'], 'src/mesa', source)
	dst = os.path.join(Dir('.').srcnode().abspath, source)
	dst_dir = os.path.dirname(dst)
	if not os.path.exists(dst_dir):
		print "Creating %s" % os.path.dirname(source)
		os.makedirs(dst_dir)
	if (not os.path.exists(dst) 
	    or os.path.getsize(dst) != os.path.getsize(src) 
	    or os.path.getmtime(dst) != os.path.getmtime(src)):
		print "Copying %s" % source
		shutil.copy2(src, dst)


sources = [source for source in mesa_sources if source.endswith('.c')]
sources_lcl = [source for source in local_sources if source.endswith('.c')]

mesa_es = env.ConvenienceLibrary(
	target = 'mesa_es',
	source = sources + sources_lcl,
)

Export('mesa_es')
