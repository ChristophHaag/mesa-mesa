Import('*')

env = env.Clone()

env.ParseConfig('llvm-config --cflags')

llvmpipe = env.ConvenienceLibrary(
	target = 'llvmpipe',
	source = [
		'lp_fs_exec.c',
		'lp_fs_sse.c',
		'lp_fs_llvm.c',
		'lp_bld_arit.c',
		'lp_bld_const.c',
		'lp_bld_conv.c',
		'lp_bld_intr.c',
		'lp_bld_pack.c',
		'lp_bld_unpack.c',
		'lp_bld_load.c',
		'lp_bld_store.c',
		'lp_bld_loop.c',
		'lp_bld_logicop.c',
		'lp_bld_blend.c',
		'lp_bld_swizzle.c',
		'lp_bld_type.c',
		'lp_clear.c',
		'lp_context.c',
		'lp_draw_arrays.c',
		'lp_flush.c',
		'lp_prim_setup.c',
		'lp_prim_vbuf.c',
		'lp_setup.c',
		'lp_quad_blend.c',
		'lp_quad_pipe.c',
		'lp_quad_depth_test.c',
		'lp_quad_fs.c',
		'lp_quad_stipple.c',
		'lp_query.c',
		'lp_screen.c',
		'lp_state_blend.c',
		'lp_state_clip.c',
		'lp_state_derived.c',
		'lp_state_fs.c',
		'lp_state_rasterizer.c',
		'lp_state_sampler.c',
		'lp_state_surface.c',
		'lp_state_vertex.c',
		'lp_surface.c',
		'lp_tex_sample.c',
		'lp_texture.c',
		'lp_tile_cache.c',
	])


env = env.Clone()

env['LINK'] = env['CXX']
env.ParseConfig('llvm-config --libs jit interpreter nativecodegen bitwriter')
env.Prepend(LIBS = [llvmpipe] + auxiliaries)

env.Program(
    target = 'lp_test_format',
    source = ['lp_test_format.c'],
)

env.Program(
    target = 'lp_test_blend',
    source = ['lp_test_blend.c', 'lp_test_main.c'],
)

env.Program(
    target = 'lp_test_conv',
    source = ['lp_test_conv.c', 'lp_test_main.c'],
)

Export('llvmpipe')
